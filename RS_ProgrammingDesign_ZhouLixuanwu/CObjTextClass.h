//----------------------------------------------------------------------------------------------------------------------------------------

//文件名：CObjTextClass.h		C-Object-C-text-Class

//功能：声明CObjTextClass类,完成带注释的点结构存储的功能

//该类的作用：链表操作（增加一个节点，删除全部节点）、输入输出文件

//----------------------------------------------------------------------------------------------------------------------------------------


//------------------------------------------------
//0）宏定义
//------------------------------------------------
#define   ForLoop(p,b)            for(p=b;p!=NULL;p=p->next)		//为了方便遍历链表作宏定义
//------------------------------------------------
//1）注释数据结构：
//------------------------------------------------
//定义 注释 链表 结构
//------------------------------------------------
typedef struct    tag_Text_Struct TEXT;		//这里typedef 给 struct tagCTextStruct 这个结构类型一个新名字 CTEXT，接下来用起来就方便了
											//typedef和define相对应，define是把一个自己起的名字的常量定义为代替它的另一个常量来使用。
											//typedef是把一个自己起的名字的类型用已经有的类型代替使用


struct  tag_Text_Struct                      //带注释的点的结构定义
{
	short            CharNum;               //注释长
	float            X0, Y0;                //显示位置
	char            *textAdr;               //注释内容
	TEXT           *next;					//下一个注释开始地址，链表结构
};

#pragma once

//2）采用类编程：
//------------------------------------------------
//定义 注释类操作
//------------------------------------------------
class CObjTextClass
{

public:
	CObjTextClass();		//构造函数，缺省
	~CObjTextClass();		//析构函数，缺省
public:
	//链表操作
	TEXT*  AddOneText(float X0, float Y0, char *msg);		//增加
	void    DeleteTextFunc();								//删除
	//输入输出
	bool    LoadTextFunc(const char *filename);			//输入
	void    SaveTextFunc(const char *filename);			//输出

public:
	//采用线性链表存储数据，链表头用全局变量：
	int             TextNum = 0;          //字符串图元记录结构数
	TEXT           *HeadText = nullptr;      //字符串图元结构头
	TEXT           *EndText = nullptr;       //字符串图元结构尾

};
